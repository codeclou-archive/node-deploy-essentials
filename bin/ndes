#!/usr/bin/env node

var deployToGitHubPages = require('../scripts/deployToGitHubPages.js');
var deployToGitHubBranch = require('../scripts/deployToGitHubBranch.js');
var replace = require('../scripts/replace.js');
var grepJson = require('../scripts/grepJson');
var docker = require('../scripts/docker');
var http = require('../scripts/http');
var fs = require('fs');
var shell = require('shelljs');
var path = require('path');

if (process.argv[2] === '--version' || process.argv[2] === '-v' ) {
    var packageJson = fs.readFileSync(path.resolve(__dirname, '../package.json'));
    var packageJsonParsed = JSON.parse(packageJson);
    shell.echo(packageJsonParsed.version);
}

if (process.argv[2] === 'deployToGitHubPages') {
    var gitHubSubdirectory = null;
    if (process.argv[3] === 'as' && process.argv[4] !== undefined) {
        var gitHubCommitterName = process.argv[4];
    }
    if (process.argv[5] === 'withEmail' && process.argv[6] !== undefined) {
        var gitHubCommitterEmail = process.argv[6];
    }
    if (process.argv[7] === 'withGitHubAuthUsername' && process.argv[8] !== undefined) {
        var gitHubAuthUsername = process.argv[8];
    }
    if (process.argv[9] === 'withGitHubAuthToken' && process.argv[10] !== undefined) {
        var gitHubAuthTokenOrPassword = process.argv[10];
    }
    if (process.argv[11] === 'toRepository' && process.argv[12] !== undefined) {
        var gitHubCloneUrl = process.argv[12];
    }
    if (process.argv[13] === 'fromSource' && process.argv[14] !== undefined) {
        var sourceDirToDeployContents = process.argv[14];
    }
    if (process.argv[15] === 'intoSubdirectory' && process.argv[16] !== undefined) {
        gitHubSubdirectory = process.argv[16];
    }
    deployToGitHubPages.run(
        gitHubCommitterEmail,
        gitHubCommitterName,
        gitHubAuthUsername,
        gitHubAuthTokenOrPassword,
        gitHubCloneUrl,
        gitHubSubdirectory,
        sourceDirToDeployContents);




} else if (process.argv[2] === 'deployToGitHubBranch') {
    var gitHubSubdirectory = null;
    if (process.argv[3] === 'as' && process.argv[4] !== undefined) {
        var gitHubCommitterName = process.argv[4];
    }
    if (process.argv[5] === 'withEmail' && process.argv[6] !== undefined) {
        var gitHubCommitterEmail = process.argv[6];
    }
    if (process.argv[7] === 'withGitHubAuthUsername' && process.argv[8] !== undefined) {
        var gitHubAuthUsername = process.argv[8];
    }
    if (process.argv[9] === 'withGitHubAuthToken' && process.argv[10] !== undefined) {
        var gitHubAuthTokenOrPassword = process.argv[10];
    }
    if (process.argv[11] === 'toRepository' && process.argv[12] !== undefined) {
        var gitHubCloneUrl = process.argv[12];
    }
    if (process.argv[13] === 'branch' && process.argv[14] !== undefined) {
        var gitHubBranch = process.argv[14];
    }
    if (process.argv[15] === 'fromSource' && process.argv[16] !== undefined) {
        var sourceDirToDeployContents = process.argv[16];
    }
    if (process.argv[17] === 'intoSubdirectory' && process.argv[18] !== undefined) {
        gitHubSubdirectory = process.argv[18];
    }
    deployToGitHubBranch.run(
        gitHubCommitterEmail,
        gitHubCommitterName,
        gitHubAuthUsername,
        gitHubAuthTokenOrPassword,
        gitHubCloneUrl,
        gitHubBranch,
        gitHubSubdirectory,
        sourceDirToDeployContents);





} else if (process.argv[2] === 'replace') {
    var stringToReplace = process.argv[3];
    var replacementString = '';
    var fileToPerformReplaceOn = '';
    if (process.argv[4] === 'byValue' && process.argv[5] !== undefined) {
        replacementString = process.argv[5];
        fileToPerformReplaceOn = process.argv[7];
    }
    if (process.argv[4] === 'byCurrentTimetamp') {
        replacementString = new Date().toISOString();
        fileToPerformReplaceOn = process.argv[6];
    }
    replace.run(stringToReplace, replacementString, fileToPerformReplaceOn);


} else if (process.argv[2] === 'grepJson') {
    var jsonpath = process.argv[3];
    var jsonfile = process.argv[5];
    var message = null;
    if (process.argv[6] === 'withMessage' && process.argv[7] !== undefined) {
        message = process.argv[7];
    }
    grepJson.run(jsonpath, jsonfile, message);

} else if (process.argv[2] === 'docker') {
    var dockerCommand = process.argv[3];
    if (dockerCommand === 'killOnPort' && process.argv[4] !== undefined) {
        var port = process.argv[4];
        docker.killOnPort(port);
    }
    if (dockerCommand === 'deleteDanglingNamedDockerContainer' && process.argv[4] !== undefined) {
        var name = process.argv[4];
        docker.deleteDanglingNamedDockerContainer(name);
    }

} else if (process.argv[2] === 'http') {
    var command = process.argv[3];
    if (command === 'waitForStatusCode' && process.argv[4] !== undefined && process.argv[5] !== undefined) {
        var statusCode = process.argv[4];
        var url = process.argv[5];
        http.waitForStatusCode(statusCode, url);
    }

} else {
    process.exit(1);
}